/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Replica_H
#define Replica_H

#include <thrift/TDispatchProcessor.h>
#include "replica_types.h"

namespace mp2 {

class ReplicaIf {
 public:
  virtual ~ReplicaIf() {}
  virtual void create(const std::string& name, const std::string& initialState) = 0;
  virtual void apply(std::string& _return, const std::string& name, const std::string& operation) = 0;
  virtual void getState(std::string& _return, const int16_t client, const std::string& name) = 0;
  virtual void remove(const std::string& name) = 0;
  virtual int16_t prepareGetState(const int16_t client, const std::string& name) = 0;
  virtual void makeCopy(const std::string& name, const int16_t destination) = 0;
  virtual int16_t getLeader() = 0;
  virtual int16_t getQueueLen() = 0;
  virtual int16_t getBwUtilization() = 0;
  virtual int16_t getMemUtilization() = 0;
  virtual int16_t startLeaderElection() = 0;
  virtual bool stateExists(const std::string& name) = 0;
  virtual void notifyFinishedReading(const int16_t rmid, const int16_t client, const std::string& name) = 0;
  virtual void prepare(Promise& _return, const int32_t n) = 0;
  virtual bool accept(const int32_t n, const int32_t value) = 0;
  virtual void inform(const int32_t value) = 0;
  virtual void exit() = 0;
};

class ReplicaIfFactory {
 public:
  typedef ReplicaIf Handler;

  virtual ~ReplicaIfFactory() {}

  virtual ReplicaIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ReplicaIf* /* handler */) = 0;
};

class ReplicaIfSingletonFactory : virtual public ReplicaIfFactory {
 public:
  ReplicaIfSingletonFactory(const boost::shared_ptr<ReplicaIf>& iface) : iface_(iface) {}
  virtual ~ReplicaIfSingletonFactory() {}

  virtual ReplicaIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ReplicaIf* /* handler */) {}

 protected:
  boost::shared_ptr<ReplicaIf> iface_;
};

class ReplicaNull : virtual public ReplicaIf {
 public:
  virtual ~ReplicaNull() {}
  void create(const std::string& /* name */, const std::string& /* initialState */) {
    return;
  }
  void apply(std::string& /* _return */, const std::string& /* name */, const std::string& /* operation */) {
    return;
  }
  void getState(std::string& /* _return */, const int16_t /* client */, const std::string& /* name */) {
    return;
  }
  void remove(const std::string& /* name */) {
    return;
  }
  int16_t prepareGetState(const int16_t /* client */, const std::string& /* name */) {
    int16_t _return = 0;
    return _return;
  }
  void makeCopy(const std::string& /* name */, const int16_t /* destination */) {
    return;
  }
  int16_t getLeader() {
    int16_t _return = 0;
    return _return;
  }
  int16_t getQueueLen() {
    int16_t _return = 0;
    return _return;
  }
  int16_t getBwUtilization() {
    int16_t _return = 0;
    return _return;
  }
  int16_t getMemUtilization() {
    int16_t _return = 0;
    return _return;
  }
  int16_t startLeaderElection() {
    int16_t _return = 0;
    return _return;
  }
  bool stateExists(const std::string& /* name */) {
    bool _return = false;
    return _return;
  }
  void notifyFinishedReading(const int16_t /* rmid */, const int16_t /* client */, const std::string& /* name */) {
    return;
  }
  void prepare(Promise& /* _return */, const int32_t /* n */) {
    return;
  }
  bool accept(const int32_t /* n */, const int32_t /* value */) {
    bool _return = false;
    return _return;
  }
  void inform(const int32_t /* value */) {
    return;
  }
  void exit() {
    return;
  }
};

typedef struct _Replica_create_args__isset {
  _Replica_create_args__isset() : name(false), initialState(false) {}
  bool name;
  bool initialState;
} _Replica_create_args__isset;

class Replica_create_args {
 public:

  Replica_create_args() : name(), initialState() {
  }

  virtual ~Replica_create_args() throw() {}

  std::string name;
  std::string initialState;

  _Replica_create_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_initialState(const std::string& val) {
    initialState = val;
  }

  bool operator == (const Replica_create_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(initialState == rhs.initialState))
      return false;
    return true;
  }
  bool operator != (const Replica_create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_create_pargs {
 public:


  virtual ~Replica_create_pargs() throw() {}

  const std::string* name;
  const std::string* initialState;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_create_result__isset {
  _Replica_create_result__isset() : e(false) {}
  bool e;
} _Replica_create_result__isset;

class Replica_create_result {
 public:

  Replica_create_result() {
  }

  virtual ~Replica_create_result() throw() {}

  ReplicaError e;

  _Replica_create_result__isset __isset;

  void __set_e(const ReplicaError& val) {
    e = val;
  }

  bool operator == (const Replica_create_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Replica_create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_create_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_create_presult__isset {
  _Replica_create_presult__isset() : e(false) {}
  bool e;
} _Replica_create_presult__isset;

class Replica_create_presult {
 public:


  virtual ~Replica_create_presult() throw() {}

  ReplicaError e;

  _Replica_create_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Replica_apply_args__isset {
  _Replica_apply_args__isset() : name(false), operation(false) {}
  bool name;
  bool operation;
} _Replica_apply_args__isset;

class Replica_apply_args {
 public:

  Replica_apply_args() : name(), operation() {
  }

  virtual ~Replica_apply_args() throw() {}

  std::string name;
  std::string operation;

  _Replica_apply_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_operation(const std::string& val) {
    operation = val;
  }

  bool operator == (const Replica_apply_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(operation == rhs.operation))
      return false;
    return true;
  }
  bool operator != (const Replica_apply_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_apply_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_apply_pargs {
 public:


  virtual ~Replica_apply_pargs() throw() {}

  const std::string* name;
  const std::string* operation;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_apply_result__isset {
  _Replica_apply_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _Replica_apply_result__isset;

class Replica_apply_result {
 public:

  Replica_apply_result() : success() {
  }

  virtual ~Replica_apply_result() throw() {}

  std::string success;
  ReplicaError e;

  _Replica_apply_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_e(const ReplicaError& val) {
    e = val;
  }

  bool operator == (const Replica_apply_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Replica_apply_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_apply_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_apply_presult__isset {
  _Replica_apply_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _Replica_apply_presult__isset;

class Replica_apply_presult {
 public:


  virtual ~Replica_apply_presult() throw() {}

  std::string* success;
  ReplicaError e;

  _Replica_apply_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Replica_getState_args__isset {
  _Replica_getState_args__isset() : client(false), name(false) {}
  bool client;
  bool name;
} _Replica_getState_args__isset;

class Replica_getState_args {
 public:

  Replica_getState_args() : client(0), name() {
  }

  virtual ~Replica_getState_args() throw() {}

  int16_t client;
  std::string name;

  _Replica_getState_args__isset __isset;

  void __set_client(const int16_t val) {
    client = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Replica_getState_args & rhs) const
  {
    if (!(client == rhs.client))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Replica_getState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_getState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_getState_pargs {
 public:


  virtual ~Replica_getState_pargs() throw() {}

  const int16_t* client;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_getState_result__isset {
  _Replica_getState_result__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _Replica_getState_result__isset;

class Replica_getState_result {
 public:

  Replica_getState_result() : success() {
  }

  virtual ~Replica_getState_result() throw() {}

  std::string success;
  ReplicaError e;

  _Replica_getState_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_e(const ReplicaError& val) {
    e = val;
  }

  bool operator == (const Replica_getState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Replica_getState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_getState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_getState_presult__isset {
  _Replica_getState_presult__isset() : success(false), e(false) {}
  bool success;
  bool e;
} _Replica_getState_presult__isset;

class Replica_getState_presult {
 public:


  virtual ~Replica_getState_presult() throw() {}

  std::string* success;
  ReplicaError e;

  _Replica_getState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Replica_remove_args__isset {
  _Replica_remove_args__isset() : name(false) {}
  bool name;
} _Replica_remove_args__isset;

class Replica_remove_args {
 public:

  Replica_remove_args() : name() {
  }

  virtual ~Replica_remove_args() throw() {}

  std::string name;

  _Replica_remove_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Replica_remove_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Replica_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_remove_pargs {
 public:


  virtual ~Replica_remove_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_remove_result__isset {
  _Replica_remove_result__isset() : e(false) {}
  bool e;
} _Replica_remove_result__isset;

class Replica_remove_result {
 public:

  Replica_remove_result() {
  }

  virtual ~Replica_remove_result() throw() {}

  ReplicaError e;

  _Replica_remove_result__isset __isset;

  void __set_e(const ReplicaError& val) {
    e = val;
  }

  bool operator == (const Replica_remove_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Replica_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_remove_presult__isset {
  _Replica_remove_presult__isset() : e(false) {}
  bool e;
} _Replica_remove_presult__isset;

class Replica_remove_presult {
 public:


  virtual ~Replica_remove_presult() throw() {}

  ReplicaError e;

  _Replica_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Replica_prepareGetState_args__isset {
  _Replica_prepareGetState_args__isset() : client(false), name(false) {}
  bool client;
  bool name;
} _Replica_prepareGetState_args__isset;

class Replica_prepareGetState_args {
 public:

  Replica_prepareGetState_args() : client(0), name() {
  }

  virtual ~Replica_prepareGetState_args() throw() {}

  int16_t client;
  std::string name;

  _Replica_prepareGetState_args__isset __isset;

  void __set_client(const int16_t val) {
    client = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Replica_prepareGetState_args & rhs) const
  {
    if (!(client == rhs.client))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Replica_prepareGetState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_prepareGetState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_prepareGetState_pargs {
 public:


  virtual ~Replica_prepareGetState_pargs() throw() {}

  const int16_t* client;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_prepareGetState_result__isset {
  _Replica_prepareGetState_result__isset() : success(false) {}
  bool success;
} _Replica_prepareGetState_result__isset;

class Replica_prepareGetState_result {
 public:

  Replica_prepareGetState_result() : success(0) {
  }

  virtual ~Replica_prepareGetState_result() throw() {}

  int16_t success;

  _Replica_prepareGetState_result__isset __isset;

  void __set_success(const int16_t val) {
    success = val;
  }

  bool operator == (const Replica_prepareGetState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Replica_prepareGetState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_prepareGetState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_prepareGetState_presult__isset {
  _Replica_prepareGetState_presult__isset() : success(false) {}
  bool success;
} _Replica_prepareGetState_presult__isset;

class Replica_prepareGetState_presult {
 public:


  virtual ~Replica_prepareGetState_presult() throw() {}

  int16_t* success;

  _Replica_prepareGetState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Replica_makeCopy_args__isset {
  _Replica_makeCopy_args__isset() : name(false), destination(false) {}
  bool name;
  bool destination;
} _Replica_makeCopy_args__isset;

class Replica_makeCopy_args {
 public:

  Replica_makeCopy_args() : name(), destination(0) {
  }

  virtual ~Replica_makeCopy_args() throw() {}

  std::string name;
  int16_t destination;

  _Replica_makeCopy_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_destination(const int16_t val) {
    destination = val;
  }

  bool operator == (const Replica_makeCopy_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(destination == rhs.destination))
      return false;
    return true;
  }
  bool operator != (const Replica_makeCopy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_makeCopy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_makeCopy_pargs {
 public:


  virtual ~Replica_makeCopy_pargs() throw() {}

  const std::string* name;
  const int16_t* destination;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_makeCopy_result {
 public:

  Replica_makeCopy_result() {
  }

  virtual ~Replica_makeCopy_result() throw() {}


  bool operator == (const Replica_makeCopy_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Replica_makeCopy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_makeCopy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_makeCopy_presult {
 public:


  virtual ~Replica_makeCopy_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Replica_getLeader_args {
 public:

  Replica_getLeader_args() {
  }

  virtual ~Replica_getLeader_args() throw() {}


  bool operator == (const Replica_getLeader_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Replica_getLeader_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_getLeader_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_getLeader_pargs {
 public:


  virtual ~Replica_getLeader_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_getLeader_result__isset {
  _Replica_getLeader_result__isset() : success(false) {}
  bool success;
} _Replica_getLeader_result__isset;

class Replica_getLeader_result {
 public:

  Replica_getLeader_result() : success(0) {
  }

  virtual ~Replica_getLeader_result() throw() {}

  int16_t success;

  _Replica_getLeader_result__isset __isset;

  void __set_success(const int16_t val) {
    success = val;
  }

  bool operator == (const Replica_getLeader_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Replica_getLeader_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_getLeader_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_getLeader_presult__isset {
  _Replica_getLeader_presult__isset() : success(false) {}
  bool success;
} _Replica_getLeader_presult__isset;

class Replica_getLeader_presult {
 public:


  virtual ~Replica_getLeader_presult() throw() {}

  int16_t* success;

  _Replica_getLeader_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Replica_getQueueLen_args {
 public:

  Replica_getQueueLen_args() {
  }

  virtual ~Replica_getQueueLen_args() throw() {}


  bool operator == (const Replica_getQueueLen_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Replica_getQueueLen_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_getQueueLen_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_getQueueLen_pargs {
 public:


  virtual ~Replica_getQueueLen_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_getQueueLen_result__isset {
  _Replica_getQueueLen_result__isset() : success(false) {}
  bool success;
} _Replica_getQueueLen_result__isset;

class Replica_getQueueLen_result {
 public:

  Replica_getQueueLen_result() : success(0) {
  }

  virtual ~Replica_getQueueLen_result() throw() {}

  int16_t success;

  _Replica_getQueueLen_result__isset __isset;

  void __set_success(const int16_t val) {
    success = val;
  }

  bool operator == (const Replica_getQueueLen_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Replica_getQueueLen_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_getQueueLen_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_getQueueLen_presult__isset {
  _Replica_getQueueLen_presult__isset() : success(false) {}
  bool success;
} _Replica_getQueueLen_presult__isset;

class Replica_getQueueLen_presult {
 public:


  virtual ~Replica_getQueueLen_presult() throw() {}

  int16_t* success;

  _Replica_getQueueLen_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Replica_getBwUtilization_args {
 public:

  Replica_getBwUtilization_args() {
  }

  virtual ~Replica_getBwUtilization_args() throw() {}


  bool operator == (const Replica_getBwUtilization_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Replica_getBwUtilization_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_getBwUtilization_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_getBwUtilization_pargs {
 public:


  virtual ~Replica_getBwUtilization_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_getBwUtilization_result__isset {
  _Replica_getBwUtilization_result__isset() : success(false) {}
  bool success;
} _Replica_getBwUtilization_result__isset;

class Replica_getBwUtilization_result {
 public:

  Replica_getBwUtilization_result() : success(0) {
  }

  virtual ~Replica_getBwUtilization_result() throw() {}

  int16_t success;

  _Replica_getBwUtilization_result__isset __isset;

  void __set_success(const int16_t val) {
    success = val;
  }

  bool operator == (const Replica_getBwUtilization_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Replica_getBwUtilization_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_getBwUtilization_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_getBwUtilization_presult__isset {
  _Replica_getBwUtilization_presult__isset() : success(false) {}
  bool success;
} _Replica_getBwUtilization_presult__isset;

class Replica_getBwUtilization_presult {
 public:


  virtual ~Replica_getBwUtilization_presult() throw() {}

  int16_t* success;

  _Replica_getBwUtilization_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Replica_getMemUtilization_args {
 public:

  Replica_getMemUtilization_args() {
  }

  virtual ~Replica_getMemUtilization_args() throw() {}


  bool operator == (const Replica_getMemUtilization_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Replica_getMemUtilization_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_getMemUtilization_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_getMemUtilization_pargs {
 public:


  virtual ~Replica_getMemUtilization_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_getMemUtilization_result__isset {
  _Replica_getMemUtilization_result__isset() : success(false) {}
  bool success;
} _Replica_getMemUtilization_result__isset;

class Replica_getMemUtilization_result {
 public:

  Replica_getMemUtilization_result() : success(0) {
  }

  virtual ~Replica_getMemUtilization_result() throw() {}

  int16_t success;

  _Replica_getMemUtilization_result__isset __isset;

  void __set_success(const int16_t val) {
    success = val;
  }

  bool operator == (const Replica_getMemUtilization_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Replica_getMemUtilization_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_getMemUtilization_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_getMemUtilization_presult__isset {
  _Replica_getMemUtilization_presult__isset() : success(false) {}
  bool success;
} _Replica_getMemUtilization_presult__isset;

class Replica_getMemUtilization_presult {
 public:


  virtual ~Replica_getMemUtilization_presult() throw() {}

  int16_t* success;

  _Replica_getMemUtilization_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Replica_startLeaderElection_args {
 public:

  Replica_startLeaderElection_args() {
  }

  virtual ~Replica_startLeaderElection_args() throw() {}


  bool operator == (const Replica_startLeaderElection_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Replica_startLeaderElection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_startLeaderElection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_startLeaderElection_pargs {
 public:


  virtual ~Replica_startLeaderElection_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_startLeaderElection_result__isset {
  _Replica_startLeaderElection_result__isset() : success(false) {}
  bool success;
} _Replica_startLeaderElection_result__isset;

class Replica_startLeaderElection_result {
 public:

  Replica_startLeaderElection_result() : success(0) {
  }

  virtual ~Replica_startLeaderElection_result() throw() {}

  int16_t success;

  _Replica_startLeaderElection_result__isset __isset;

  void __set_success(const int16_t val) {
    success = val;
  }

  bool operator == (const Replica_startLeaderElection_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Replica_startLeaderElection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_startLeaderElection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_startLeaderElection_presult__isset {
  _Replica_startLeaderElection_presult__isset() : success(false) {}
  bool success;
} _Replica_startLeaderElection_presult__isset;

class Replica_startLeaderElection_presult {
 public:


  virtual ~Replica_startLeaderElection_presult() throw() {}

  int16_t* success;

  _Replica_startLeaderElection_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Replica_stateExists_args__isset {
  _Replica_stateExists_args__isset() : name(false) {}
  bool name;
} _Replica_stateExists_args__isset;

class Replica_stateExists_args {
 public:

  Replica_stateExists_args() : name() {
  }

  virtual ~Replica_stateExists_args() throw() {}

  std::string name;

  _Replica_stateExists_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Replica_stateExists_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Replica_stateExists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_stateExists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_stateExists_pargs {
 public:


  virtual ~Replica_stateExists_pargs() throw() {}

  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_stateExists_result__isset {
  _Replica_stateExists_result__isset() : success(false) {}
  bool success;
} _Replica_stateExists_result__isset;

class Replica_stateExists_result {
 public:

  Replica_stateExists_result() : success(0) {
  }

  virtual ~Replica_stateExists_result() throw() {}

  bool success;

  _Replica_stateExists_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Replica_stateExists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Replica_stateExists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_stateExists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_stateExists_presult__isset {
  _Replica_stateExists_presult__isset() : success(false) {}
  bool success;
} _Replica_stateExists_presult__isset;

class Replica_stateExists_presult {
 public:


  virtual ~Replica_stateExists_presult() throw() {}

  bool* success;

  _Replica_stateExists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Replica_notifyFinishedReading_args__isset {
  _Replica_notifyFinishedReading_args__isset() : rmid(false), client(false), name(false) {}
  bool rmid;
  bool client;
  bool name;
} _Replica_notifyFinishedReading_args__isset;

class Replica_notifyFinishedReading_args {
 public:

  Replica_notifyFinishedReading_args() : rmid(0), client(0), name() {
  }

  virtual ~Replica_notifyFinishedReading_args() throw() {}

  int16_t rmid;
  int16_t client;
  std::string name;

  _Replica_notifyFinishedReading_args__isset __isset;

  void __set_rmid(const int16_t val) {
    rmid = val;
  }

  void __set_client(const int16_t val) {
    client = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Replica_notifyFinishedReading_args & rhs) const
  {
    if (!(rmid == rhs.rmid))
      return false;
    if (!(client == rhs.client))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Replica_notifyFinishedReading_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_notifyFinishedReading_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_notifyFinishedReading_pargs {
 public:


  virtual ~Replica_notifyFinishedReading_pargs() throw() {}

  const int16_t* rmid;
  const int16_t* client;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_notifyFinishedReading_result {
 public:

  Replica_notifyFinishedReading_result() {
  }

  virtual ~Replica_notifyFinishedReading_result() throw() {}


  bool operator == (const Replica_notifyFinishedReading_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Replica_notifyFinishedReading_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_notifyFinishedReading_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_notifyFinishedReading_presult {
 public:


  virtual ~Replica_notifyFinishedReading_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Replica_prepare_args__isset {
  _Replica_prepare_args__isset() : n(false) {}
  bool n;
} _Replica_prepare_args__isset;

class Replica_prepare_args {
 public:

  Replica_prepare_args() : n(0) {
  }

  virtual ~Replica_prepare_args() throw() {}

  int32_t n;

  _Replica_prepare_args__isset __isset;

  void __set_n(const int32_t val) {
    n = val;
  }

  bool operator == (const Replica_prepare_args & rhs) const
  {
    if (!(n == rhs.n))
      return false;
    return true;
  }
  bool operator != (const Replica_prepare_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_prepare_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_prepare_pargs {
 public:


  virtual ~Replica_prepare_pargs() throw() {}

  const int32_t* n;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_prepare_result__isset {
  _Replica_prepare_result__isset() : success(false) {}
  bool success;
} _Replica_prepare_result__isset;

class Replica_prepare_result {
 public:

  Replica_prepare_result() {
  }

  virtual ~Replica_prepare_result() throw() {}

  Promise success;

  _Replica_prepare_result__isset __isset;

  void __set_success(const Promise& val) {
    success = val;
  }

  bool operator == (const Replica_prepare_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Replica_prepare_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_prepare_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_prepare_presult__isset {
  _Replica_prepare_presult__isset() : success(false) {}
  bool success;
} _Replica_prepare_presult__isset;

class Replica_prepare_presult {
 public:


  virtual ~Replica_prepare_presult() throw() {}

  Promise* success;

  _Replica_prepare_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Replica_accept_args__isset {
  _Replica_accept_args__isset() : n(false), value(false) {}
  bool n;
  bool value;
} _Replica_accept_args__isset;

class Replica_accept_args {
 public:

  Replica_accept_args() : n(0), value(0) {
  }

  virtual ~Replica_accept_args() throw() {}

  int32_t n;
  int32_t value;

  _Replica_accept_args__isset __isset;

  void __set_n(const int32_t val) {
    n = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const Replica_accept_args & rhs) const
  {
    if (!(n == rhs.n))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Replica_accept_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_accept_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_accept_pargs {
 public:


  virtual ~Replica_accept_pargs() throw() {}

  const int32_t* n;
  const int32_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_accept_result__isset {
  _Replica_accept_result__isset() : success(false) {}
  bool success;
} _Replica_accept_result__isset;

class Replica_accept_result {
 public:

  Replica_accept_result() : success(0) {
  }

  virtual ~Replica_accept_result() throw() {}

  bool success;

  _Replica_accept_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Replica_accept_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Replica_accept_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_accept_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Replica_accept_presult__isset {
  _Replica_accept_presult__isset() : success(false) {}
  bool success;
} _Replica_accept_presult__isset;

class Replica_accept_presult {
 public:


  virtual ~Replica_accept_presult() throw() {}

  bool* success;

  _Replica_accept_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Replica_inform_args__isset {
  _Replica_inform_args__isset() : value(false) {}
  bool value;
} _Replica_inform_args__isset;

class Replica_inform_args {
 public:

  Replica_inform_args() : value(0) {
  }

  virtual ~Replica_inform_args() throw() {}

  int32_t value;

  _Replica_inform_args__isset __isset;

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const Replica_inform_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Replica_inform_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_inform_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_inform_pargs {
 public:


  virtual ~Replica_inform_pargs() throw() {}

  const int32_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_exit_args {
 public:

  Replica_exit_args() {
  }

  virtual ~Replica_exit_args() throw() {}


  bool operator == (const Replica_exit_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Replica_exit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Replica_exit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Replica_exit_pargs {
 public:


  virtual ~Replica_exit_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ReplicaClient : virtual public ReplicaIf {
 public:
  ReplicaClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ReplicaClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void create(const std::string& name, const std::string& initialState);
  void send_create(const std::string& name, const std::string& initialState);
  void recv_create();
  void apply(std::string& _return, const std::string& name, const std::string& operation);
  void send_apply(const std::string& name, const std::string& operation);
  void recv_apply(std::string& _return);
  void getState(std::string& _return, const int16_t client, const std::string& name);
  void send_getState(const int16_t client, const std::string& name);
  void recv_getState(std::string& _return);
  void remove(const std::string& name);
  void send_remove(const std::string& name);
  void recv_remove();
  int16_t prepareGetState(const int16_t client, const std::string& name);
  void send_prepareGetState(const int16_t client, const std::string& name);
  int16_t recv_prepareGetState();
  void makeCopy(const std::string& name, const int16_t destination);
  void send_makeCopy(const std::string& name, const int16_t destination);
  void recv_makeCopy();
  int16_t getLeader();
  void send_getLeader();
  int16_t recv_getLeader();
  int16_t getQueueLen();
  void send_getQueueLen();
  int16_t recv_getQueueLen();
  int16_t getBwUtilization();
  void send_getBwUtilization();
  int16_t recv_getBwUtilization();
  int16_t getMemUtilization();
  void send_getMemUtilization();
  int16_t recv_getMemUtilization();
  int16_t startLeaderElection();
  void send_startLeaderElection();
  int16_t recv_startLeaderElection();
  bool stateExists(const std::string& name);
  void send_stateExists(const std::string& name);
  bool recv_stateExists();
  void notifyFinishedReading(const int16_t rmid, const int16_t client, const std::string& name);
  void send_notifyFinishedReading(const int16_t rmid, const int16_t client, const std::string& name);
  void recv_notifyFinishedReading();
  void prepare(Promise& _return, const int32_t n);
  void send_prepare(const int32_t n);
  void recv_prepare(Promise& _return);
  bool accept(const int32_t n, const int32_t value);
  void send_accept(const int32_t n, const int32_t value);
  bool recv_accept();
  void inform(const int32_t value);
  void send_inform(const int32_t value);
  void exit();
  void send_exit();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ReplicaProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ReplicaIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ReplicaProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_apply(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepareGetState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_makeCopy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLeader(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getQueueLen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBwUtilization(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMemUtilization(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startLeaderElection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stateExists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyFinishedReading(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepare(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_accept(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_inform(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_exit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ReplicaProcessor(boost::shared_ptr<ReplicaIf> iface) :
    iface_(iface) {
    processMap_["create"] = &ReplicaProcessor::process_create;
    processMap_["apply"] = &ReplicaProcessor::process_apply;
    processMap_["getState"] = &ReplicaProcessor::process_getState;
    processMap_["remove"] = &ReplicaProcessor::process_remove;
    processMap_["prepareGetState"] = &ReplicaProcessor::process_prepareGetState;
    processMap_["makeCopy"] = &ReplicaProcessor::process_makeCopy;
    processMap_["getLeader"] = &ReplicaProcessor::process_getLeader;
    processMap_["getQueueLen"] = &ReplicaProcessor::process_getQueueLen;
    processMap_["getBwUtilization"] = &ReplicaProcessor::process_getBwUtilization;
    processMap_["getMemUtilization"] = &ReplicaProcessor::process_getMemUtilization;
    processMap_["startLeaderElection"] = &ReplicaProcessor::process_startLeaderElection;
    processMap_["stateExists"] = &ReplicaProcessor::process_stateExists;
    processMap_["notifyFinishedReading"] = &ReplicaProcessor::process_notifyFinishedReading;
    processMap_["prepare"] = &ReplicaProcessor::process_prepare;
    processMap_["accept"] = &ReplicaProcessor::process_accept;
    processMap_["inform"] = &ReplicaProcessor::process_inform;
    processMap_["exit"] = &ReplicaProcessor::process_exit;
  }

  virtual ~ReplicaProcessor() {}
};

class ReplicaProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ReplicaProcessorFactory(const ::boost::shared_ptr< ReplicaIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ReplicaIfFactory > handlerFactory_;
};

class ReplicaMultiface : virtual public ReplicaIf {
 public:
  ReplicaMultiface(std::vector<boost::shared_ptr<ReplicaIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ReplicaMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ReplicaIf> > ifaces_;
  ReplicaMultiface() {}
  void add(boost::shared_ptr<ReplicaIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void create(const std::string& name, const std::string& initialState) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create(name, initialState);
    }
    ifaces_[i]->create(name, initialState);
  }

  void apply(std::string& _return, const std::string& name, const std::string& operation) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->apply(_return, name, operation);
    }
    ifaces_[i]->apply(_return, name, operation);
    return;
  }

  void getState(std::string& _return, const int16_t client, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getState(_return, client, name);
    }
    ifaces_[i]->getState(_return, client, name);
    return;
  }

  void remove(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(name);
    }
    ifaces_[i]->remove(name);
  }

  int16_t prepareGetState(const int16_t client, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepareGetState(client, name);
    }
    return ifaces_[i]->prepareGetState(client, name);
  }

  void makeCopy(const std::string& name, const int16_t destination) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->makeCopy(name, destination);
    }
    ifaces_[i]->makeCopy(name, destination);
  }

  int16_t getLeader() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLeader();
    }
    return ifaces_[i]->getLeader();
  }

  int16_t getQueueLen() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getQueueLen();
    }
    return ifaces_[i]->getQueueLen();
  }

  int16_t getBwUtilization() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBwUtilization();
    }
    return ifaces_[i]->getBwUtilization();
  }

  int16_t getMemUtilization() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMemUtilization();
    }
    return ifaces_[i]->getMemUtilization();
  }

  int16_t startLeaderElection() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startLeaderElection();
    }
    return ifaces_[i]->startLeaderElection();
  }

  bool stateExists(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stateExists(name);
    }
    return ifaces_[i]->stateExists(name);
  }

  void notifyFinishedReading(const int16_t rmid, const int16_t client, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyFinishedReading(rmid, client, name);
    }
    ifaces_[i]->notifyFinishedReading(rmid, client, name);
  }

  void prepare(Promise& _return, const int32_t n) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepare(_return, n);
    }
    ifaces_[i]->prepare(_return, n);
    return;
  }

  bool accept(const int32_t n, const int32_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->accept(n, value);
    }
    return ifaces_[i]->accept(n, value);
  }

  void inform(const int32_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->inform(value);
    }
    ifaces_[i]->inform(value);
  }

  void exit() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exit();
    }
    ifaces_[i]->exit();
  }

};

} // namespace

#endif
